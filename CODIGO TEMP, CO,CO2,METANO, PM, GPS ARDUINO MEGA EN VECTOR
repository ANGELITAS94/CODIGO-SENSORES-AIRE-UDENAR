emplate<class T> inline Print &operator <<(Print &obj, T arg) { obj.print(arg); return obj; }

// INICIALIZACION VARIABLES TEMPERATURE*********************************
#include <OneWire.h>                
#include <DallasTemperature.h>
OneWire ourWire(A0);                //Se establece el pin 2  como bus OneWire
DallasTemperature sensors(&ourWire); //Se declara una variable u objeto para nuestro sensor
//************************************************************************


// INICIALIZACION VARIABLES METANO **********************************
const int MQ_PIN = A15;      // Pin del sensor
const int RL_VALUE = 5;      // Resistencia RL del modulo en Kilo ohms
const int R0 = 10;          // Resistencia R0 del sensor en Kilo ohms
 
// Datos para lectura multiple
const int READ_SAMPLE_INTERVAL = 100;    // Tiempo entre muestras
const int READ_SAMPLE_TIMES = 5;       // Numero muestras
 
// Ajustar estos valores para vuestro sensor según el Datasheet
// (opcionalmente, según la calibración que hayáis realizado)
const float X0 = 200;
const float Y0 = 1.7;
const float X1 = 10000;
const float Y1 = 0.28;
 
// Puntos de la curva de concentración {X, Y}
const float punto0[] = { log10(X0), log10(Y0) };
const float punto1[] = { log10(X1), log10(Y1) };
 
// Calcular pendiente y coordenada abscisas
const float scope = (punto1[1] - punto0[1]) / (punto1[0] - punto0[0]);
const float coord = punto0[1] - punto0[0] * scope;
 //********************************************************************

// INICIALIZACION VARIABLES CO***************************************
#define VOLTAGE_REGULATOR_DIGITAL_OUT_PIN 5
#define MQ7_ANALOG_IN_PIN A1

#define MQ7_HEATER_5_V_TIME_MILLIS 60000
#define MQ7_HEATER_1_4_V_TIME_MILLIS 90000

#define GAS_LEVEL_READING_PERIOD_MILLIS 1000

unsigned long startMillis;
unsigned long switchTimeMillis;
boolean heaterInHighPhase;
//******************************************************************

//INICIALIZACION VARIABLES CO2*************************************
/************************Hardware Related Macros*********|******************
*********/
#define MG_PIN (A14) //define which analog i
//input channel you are going to use
#define BOOL_PIN (2) //Arduino D2-CO2 sensor
// digital pinout, labled with "D" on PCB
#define DC_GAIN (8.5) //define the DC gain of
// amplifier
/***********************Software Related Macros*****************************
*******/
#define READ_SAMPLE_TIMES (10) //define how many sampes you are going to take in normal operation
#define READ_SAMPLE_INTERVAL (50) //define the time interval(in milisecond) between each samples in
//normal operation
/**********************Application Related Macros***************************
*******/
//These values differ from sensor to sensor. User should derermine this value.
#define ZERO_POINT_X (2.602) //lg400=2.602, the start point_on X_axis of the curve
#define ZERO_POINT_VOLTAGE (0.324) //define the output ofthe sensor in volts when the concentration of CO2 is 400PPM
#define MAX_POINT_VOLTAGE (0.265) //define the output ofthe sensor in volts when the concentration of CO2 is 10,000PPM
#define REACTION_VOLTGAE (0.059) //define the voltage dropof the sensor when move the sensor from air into 1000ppm CO2
/*****************************Globals***************************************
********/
float CO2Curve[3] = {ZERO_POINT_X, ZERO_POINT_VOLTAGE, (REACTION_VOLTGAE / (2.602 - 4))};
//Two points are taken from the curve.With these two points, a line is forme d which is
//"approximately equivalent" to the original curve. You could use other meth ods to get more accurate slope
//CO2 Curve format:{ x, y, slope};point1: (lg400=2.602, 0.324), point2: (lg10000=4, 0.265)
//slope = (y1-y2)(i.e.reaction voltage)/ x1-x2 = (0.324-0.265)/(log400 - log10000)
//******************************************************************


//INICIALIZACION VARIABLES PM*************************************
#include <sps30.h>
#define SP30_COMMS I2C_COMMS
/* define RX and TX pin for softserial and Serial1 on ESP32
 * can be set to zero if not applicable / needed           */
#define TX_PIN 0
#define RX_PIN 0
/* define new AUTO Clean interval
 * Will be remembered after power off
 * default is 604800 seconds
 * 0 = disable Auto Clean
 * -1 = do not change current setting */
#define AUTOCLEANINTERVAL -1
/* Perform a clean NOW ?
 *  1 = yes
 *  0 = NO */
#define PERFORMCLEANNOW 0
#define DEBUG 0
// function prototypes (sometimes the pre-processor does not create prototypes themself on ESPxx)
void serialTrigger(char * mess);
void ErrtoMess(char *mess, uint8_t r);
void Errorloop(char *mess, uint8_t r);
void GetDeviceInfo();
bool read_all();
void SetAutoClean();
 
// create constructor
SPS30 sps30;

//******************************************************************


//INICIALIZACION VARIABLES GPS*************************************
#include <SoftwareSerial.h>//incluimos SoftwareSerial
#include <TinyGPS.h>//incluimos TinyGPS
TinyGPS gps;//Declaramos el objeto gps
SoftwareSerial serialgps(50,51);//Declaramos el pin 50 Tx y 51 Rx due, mega
//Declaramos la variables para la obtención de datos
int year;
byte month, day, hour, minute, second, hundredths;
unsigned long chars;
unsigned short sentences, failed_checksum;

//******************************************************************



void setup() {
delay(100);
Serial.begin(9600);
serialgps.begin(9600);//Iniciamos el puerto serie del gps
sensors.begin();   //Se inicia el sensor

// CODIGO CO*******************************************************
pinMode(VOLTAGE_REGULATOR_DIGITAL_OUT_PIN, OUTPUT);
 startMillis = millis();
 turnHeaterHigh();
//***************************************************************

// CODIGO CO2*******************************************************
pinMode(BOOL_PIN, INPUT); //set pin to input
digitalWrite(BOOL_PIN, HIGH); //turn on pullup resistors
//***************************************************************


//CODIGO PM******************************************************

// set driver debug level
  sps30.EnableDebugging(DEBUG);
 
  // set pins to use for softserial and Serial1 on ESP32
  if (TX_PIN != 0 && RX_PIN != 0) sps30.SetSerialPin(RX_PIN,TX_PIN);
 
  // Begin communication channel;
  if (sps30.begin(SP30_COMMS) == false) {
    Errorloop("could not initialize communication channel.", 0);
  }
 
  // check for SPS30 connection
  if (sps30.probe() == false) {
    Errorloop("could not probe /connect with SPS30.", 0);
  }
  else
    //Serial.println(F("Detected SPS30."));
 
  // reset SPS30 connection
  if (sps30.reset() == false) {
    Errorloop("could not reset.", 0);
  }
 
  // read device info
  GetDeviceInfo();
 
  // do Auto Clean interval
  SetAutoClean();
 
  // start measurement
  if (sps30.start() == true) {
    //Serial.println(F("Measurement started"));
  }
  else
    Errorloop("Could NOT start measurement", 0);
 
  // clean now requested
  if (PERFORMCLEANNOW) {
    // clean now
    if (sps30.clean() == true)
      Serial.println(F("fan-cleaning manually started"));
    else
      Serial.println(F("Could NOT manually start fan-cleaning"));
  }
 
 // serialTrigger("Hit <enter> to continue reading");
 
//  if (SP30_COMMS == I2C_COMMS) {
//    if (sps30.I2C_expect() == 4)
//      Serial.println(F(" !!! Due to I2C buffersize only the SPS30 MASS concentration is available !!! \n"));
//  }

//****************************************************
}
 
void loop() {
// CODIGO GPS****************************************
  while(serialgps.available()) 

{

int c = serialgps.read(); 

if(gps.encode(c)) 

{

float latitude, longitude;

gps.f_get_position(&latitude, &longitude);

//Serial.print("Latitud/Longitud: "); 
Serial.print(latitude,5); 
Serial.print(" "); 
Serial.print(longitude,5);
Serial.print(" "); 
gps.crack_datetime(&year,&month,&day,&hour,&minute,&second,&hundredths);
//Serial.print("Fecha: "); 
Serial.print(day, DEC); 
Serial.print("/"); 
Serial.print(month, DEC);
Serial.print("/"); 
Serial.print(year);
//Serial.print(" Hora: ");
Serial.print(" "); 
Serial.print(hour-5, DEC); // tiene una diferencia de 5 horas 
Serial.print(":"); 
Serial.print(minute, DEC); 
Serial.print(":");
Serial.print(second, DEC); 
Serial.print(":");
Serial.print(hundredths, DEC);
Serial.print(" "); 
//Serial.print("Altitud (metros): "); 
Serial.print(gps.f_altitude()); 
Serial.print(" "); 
//Serial.print("Rumbo (grados): "); 
Serial.print(" "); 
Serial.print(gps.f_course()); 
//Serial.print("Velocidad(kmph): "); 
Serial.print(" "); 
Serial.print(gps.f_speed_kmph());
//Serial.print("Satelites: "); 
Serial.print(" "); 
Serial.print(gps.satellites());
Serial.println();

gps.stats(&chars, &sentences, &failed_checksum);
//****************************************************

// CODIGO TEMPERATURE******************************
sensors.requestTemperatures();   //Se envía el comando para leer la temperatura
float temp= sensors.getTempCByIndex(0); //Se obtiene la temperatura en ºC
//***********************************************
// CODIGO METANO **********************************
float rs_med = readMQ(MQ_PIN);      // Obtener la Rs promedio
float concentration = getConcentration(rs_med/R0);   // Obtener la concentración
//**************************************************

// CODIGO CO****************************************
  if(heaterInHighPhase){
    // 5v phase of cycle. see if need to switch low yet
    if(millis() > switchTimeMillis) {
      turnHeaterLow();
    }
  }
  else {
    // 1.4v phase of cycle. see if need to switch high yet
    if(millis() > switchTimeMillis) {
      turnHeaterHigh();
    }
  }
 
  readGasLevel();
  delay(GAS_LEVEL_READING_PERIOD_MILLIS);
 //**************************************************  


// CODIGO CO2****************************************
int percentage;
float volts;
volts = MGRead(MG_PIN);
percentage = MGGetPercentage(volts, CO2Curve);
if (percentage == -1) {
} else {
}

if (digitalRead(BOOL_PIN) ) {
//Serial.print( "=====BOOL is HIGH======" );
} else {
//Serial.print( "=====BOOL is LOW======" );
}
//Serial.print("\n");
//delay(1000);
//****************************************************

// CODIGO PM****************************************
read_all();
//****************************************************


  
// IMPRIMIR VECTOR*****************************
 float S0 = temp;
 float S1 = concentration;
 float S2 = analogRead(MQ7_ANALOG_IN_PIN);
 float S3 = volts; 
 float sensors[4] = { S0, S1, S2, S3};
Serial  << S0 << "  " << S1 << "  " << S2 << "  " << S3 <<  " ";
//displayInfo();
//Serial.println();
//delay (100);
////************************************************
}

}



}



// Obtener la resistencia promedio en N muestras METANO*******************

float readMQ(int mq_pin)
{
   float rs = 0;
   for (int i = 0;i<READ_SAMPLE_TIMES;i++) {
      rs += getMQResistance(analogRead(mq_pin));
      delay(READ_SAMPLE_INTERVAL);
   }
   return rs / READ_SAMPLE_TIMES;
}
 
// Obtener resistencia a partir de la lectura analogica
float getMQResistance(int raw_adc)
{
   return (((float)RL_VALUE / 1000.0*(1023 - raw_adc) / raw_adc));
}
 
// Obtener concentracion 10^(coord + scope * log (rs/r0)
float getConcentration(float rs_ro_ratio)
{
   return pow(10, coord + scope * log(rs_ro_ratio));
}

//***************************************************************************


// FUNCIONES CODIGO CO ********************************************************
void turnHeaterHigh(){
  // 5v phase
  digitalWrite(VOLTAGE_REGULATOR_DIGITAL_OUT_PIN, LOW);
  heaterInHighPhase = true;
  switchTimeMillis = millis() + MQ7_HEATER_5_V_TIME_MILLIS;
}

void turnHeaterLow(){
  // 1.4v phase
  digitalWrite(VOLTAGE_REGULATOR_DIGITAL_OUT_PIN, HIGH);
  heaterInHighPhase = false;
  switchTimeMillis = millis() + MQ7_HEATER_1_4_V_TIME_MILLIS;
}

void readGasLevel(){
  unsigned int gasLevel = analogRead(MQ7_ANALOG_IN_PIN);
    unsigned int time = (millis() - startMillis) / 1000;
  
  
 
  }
//******************************************************************************

// FUNCIONES CO2****************************************************************
/***************************** MGRead *************************************
********
Input: mg_pin - analog channel
Output: output of SEN-000007
Remarks: This function reads the output of SEN-000007
****************************************************************************
********/
float MGRead(int mg_pin) {
int i;
float v = 0;
for (i = 0; i < READ_SAMPLE_TIMES; i++) {
v += analogRead(mg_pin);
delay(READ_SAMPLE_INTERVAL);
}
v = (v / READ_SAMPLE_TIMES) * 5 / 1024 ;
return v;
}
/***************************** MQGetPercentage ****************************
******
Input: volts - SEN-000007 output measured in volts
 pcurve - pointer to the curve of the target gas
Output: ppm of the target gas
Remarks: By using the slope and a point of the line. The x(logarithmic value
 of ppm)
 of the line could be derived if y(MG-811 output) is provided. As it
 is a
 logarithmic coordinate, power of 10 is used to convert the result t
o non-logarithmic
 value.
****************************************************************************
********/
int MGGetPercentage(float volts, float *pcurve) {
volts = volts / DC_GAIN;
if (volts > ZERO_POINT_VOLTAGE || volts < MAX_POINT_VOLTAGE ) {
return -1;
} else {
return pow(10, (volts - pcurve[1]) / pcurve[2] + pcurve[0]);
volts = 0;
}
}
//****************************************************************************

//FUNCIONES PM****************************************************************
void GetDeviceInfo()
{
  char buf[32];
  uint8_t ret;
 
  //try to read serial number
  ret = sps30.GetSerialNumber(buf, 32);
  if (ret == ERR_OK)  {
   // Serial.print(F("Serial number : "));
    if(strlen(buf) > 0)  Serial.println(buf);
    else Serial.println(F("not available"));
  }
  else
    ErrtoMess("could not get serial number.", ret);
 
  // try to get product name
  ret = sps30.GetProductName(buf, 32);
  if (ret == ERR_OK)  {
    //Serial.print(F("Product name : "));
 
    if(strlen(buf) > 0)  Serial.println(buf);
    else Serial.println(F("not available"));
  }
  else
    ErrtoMess("could not get product name.", ret);
 
  // try to get article code
  ret = sps30.GetArticleCode(buf, 32);
  if (ret == ERR_OK)  {
   // Serial.print(F("Article code : "));
 
    if(strlen(buf) > 0)  Serial.println(buf);
    else Serial.println(F("not available"));
  }
  else
    ErrtoMess("could not get article code.", ret);
}
 
void SetAutoClean()
{
  uint32_t interval;
  uint8_t ret;
 
  // try to get interval
  ret = sps30.GetAutoCleanInt(&interval);
  if (ret == ERR_OK) {
  //  Serial.print(F("Current Auto Clean interval: "));
  //  Serial.print(interval);
   // Serial.println(F(" seconds"));
  }
  else
    ErrtoMess("could not get clean interval.", ret);
 
  // only if requested
  if (AUTOCLEANINTERVAL == -1) {
    //Serial.println(F("No Auto Clean interval change requested."));
    return;
  }
 
  // try to set interval
  interval = AUTOCLEANINTERVAL;
  ret = sps30.SetAutoCleanInt(interval);
  if (ret == ERR_OK) {
   // Serial.print(F("Auto Clean interval now set : "));
   // Serial.print(interval);
    //Serial.println(F(" seconds"));
  }
  else
      ErrtoMess("could not set clean interval.", ret);
 
  // try to get interval
  ret = sps30.GetAutoCleanInt(&interval);
  if (ret == ERR_OK) {
   // Serial.print(F("Current Auto Clean interval: "));
   // Serial.print(interval);
   // Serial.println(F(" seconds"));
  }
  else
    ErrtoMess("could not get clean interval.", ret);
}
 
bool read_all()
{
  static bool header = true;
  uint8_t ret, error_cnt = 0;
  struct sps_values val;
 
  // loop to get data
  do {
 
    ret = sps30.GetValues(&val);
 
    // data might not have been ready
    if (ret == ERR_DATALENGTH){
 
        if (error_cnt++ > 3) {
          ErrtoMess("Error during reading values: ",ret);
          return(false);
        }
        delay(1000);
    }
    // if other error
    else if(ret != ERR_OK) {
      ErrtoMess("Error during reading values: ",ret);
      return(false);
    }
 
  } while (ret != ERR_OK);
 
  // only print header first time
  if (header) {
//    Serial.println(F("-------------Mass -----------    ------------- Number --------------   -Average-"));
  //  Serial.println(F("     Concentration [μg/m3]             Concentration [#/cm3]             [μm]"));
  //  Serial.println(F("P1.0\tP2.5\tP4.0\tP10\tP0.5\tP1.0\tP2.5\tP4.0\tP10\tPartSize\n"));
    header = false;
  }

//  Serial.print(val.MassPM1);
//  Serial.print(F("\t"));
//  Serial.print(val.MassPM2);
//  Serial.print(F("\t"));
//  Serial.print(val.MassPM4);
//  Serial.print(F("\t"));
//  Serial.print(val.MassPM10);
//  Serial.print(F("\t"));
//  Serial.print("\n");

 float S4 = val.MassPM1;
 float S5 = val.MassPM2;
 float S6 = val.MassPM4;
 float S7 = val.MassPM10;
float sensorPM[4] = { S4, S5, S6, S7};
Serial  << S4 <<  " "<< S5 <<  " "<< S6 <<  " "<< S7 <<  " ";
//displayInfo();

}

void Errorloop(char *mess, uint8_t r)
{
  if (r) ErrtoMess(mess, r);
  else Serial.println(mess);
  Serial.println(F("Program on hold"));
  for(;;) delay(100);
}
 

void ErrtoMess(char *mess, uint8_t r)
{
  char buf[80];
 
  Serial.print(mess);
 
  sps30.GetErrDescription(r, buf, 80);
  Serial.println(buf);
}
 

void serialTrigger(char * mess)
{
  Serial.println();
 
  while (!Serial.available())
  {
    Serial.println(mess);
    //delay(2000);
  }
 
  while (Serial.available())
    Serial.read();
}
//****************************************************************************
